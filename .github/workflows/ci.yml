name: CI/CD Pipeline

on:
  push:
    branches: [ main, test-github-actions ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    #   - name: Check formatting with black
    #     run: |
    #       black --check .

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    #   - name: Run unit tests with pytest
    #     run: |
    #       pytest --cov=. --cov-report=xml
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.xml

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Run SAST scan with bandit
        run: |
          bandit -r . -x ./tests
      - name: Scan dependencies with safety
        run: |
           if [ -f requirements.txt ]; then safety check -r requirements.txt; fi
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  build:
    needs: [lint, test, security-scan]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Harbor
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.HARBOR_URL }}
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ secrets.HARBOR_URL }}/library/flask-app:latest,${{ secrets.HARBOR_URL }}/project-name/flask-app:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.HARBOR_URL }}/project-name/flask-app:buildcache
          cache-to: type=registry,ref=${{ secrets.HARBOR_URL }}/project-name/flask-app:buildcache,mode=max
  

  integration-test:
    needs: build
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest requests
      - name: Set up k8s Kind cluster
        uses: helm/kind-action@v1.5.0
      - name: Deploy app to test cluster
        run: |
          kubectl create namespace test
          sed "s|image: .*/flask-app:.*$|image: ${{ secrets.HARBOR_URL }}/project-name/flask-app:${{ github.sha }}|g" helm-standard-deployment/values.yaml | kubectl apply -n test -f -
          kubectl -n test rollout status deployment/flask-app --timeout=90s
          # Expose service for testing
          kubectl -n test port-forward svc/flask-app 5000:5000 &
          sleep 5
      - name: Run integration tests
        run: |
          # Run the integration tests against the deployed app
          pytest tests/integration/
  
  update-manifests:
    needs: integration-test
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: VOTRE_NOM_UTILISATEUR/argocd-demo-app
          token: ${{ secrets.GH_PAT }}
      - name: Update image tag
        run: |
          sed -i "s|image: .*/flask-app:.*$|image: ${{ secrets.HARBOR_URL }}/project-name/flask-app:${{ github.sha }}|g" helm-standard-deployment/values.yaml
      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add helm-standard-deployment/values.yaml
          git commit -m "Update image to ${{ github.sha }}"
          git push
